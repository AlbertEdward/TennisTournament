@import url("https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap");

body {
    background: #243243;
    font-family: "Roboto", sans-serif;
}

.main-content {
    padding-top: 100px;
    padding-bottom: 100px;
}

.stat-card {
    background: #fff;
    padding: 25px;
    margin-bottom: 25px;
    border-radius: 5px;
    overflow: hidden;
    display: flex;
    justify-content: space-between;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    transition: all 0.2s;
}

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    }

.stat-card__icon-circle {
    height: 60px;
    width: 60px;
    border-radius: 60px;
    background: rgba(0, 123, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
}

    .stat-card__icon-circle i {
        font-size: 30px;
        color: #007bff;
    }

.stat-card__icon.stat-card__icon--success .stat-card__icon-circle {
    background: rgba(40, 167, 69, 0.2);
}

    .stat-card__icon.stat-card__icon--success .stat-card__icon-circle i {
        color: #28a745;
    }

.stat-card__icon.stat-card__icon--danger .stat-card__icon-circle {
    background: rgba(220, 53, 69, 0.2);
}

    .stat-card__icon.stat-card__icon--danger .stat-card__icon-circle i {
        color: #dc3545;
    }

.stat-card__icon.stat-card__icon--warning .stat-card__icon-circle {
    background: rgba(255, 193, 7, 0.2);
}

    .stat-card__icon.stat-card__icon--warning .stat-card__icon-circle i {
        color: #ffc107;
    }

.stat-card__icon.stat-card__icon--primary .stat-card__icon-circle {
    background: rgba(0, 123, 255, 0.2);
}

    .stat-card__icon.stat-card__icon--primary .stat-card__icon-circle i {
        color: #007bff;
    }


.text-color-green{
    color: #D6F667;
}

.text-color-green-dark {
    color: #00B0A6;
}

.text-color-gray{
    color: #243243;
}

.text-color-gray-dark{
    color: #1D2937;
}

.text-color-white{
    color: white;
}




// Animate the size, inside
.fill:hover,
.fill:focus {
    box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover,
.pulse:focus {
    animation: pulse 1s;
    box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 var(--hover);
    }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
    box-shadow: inset -3.5em 0 0 0 var(--hover), inset 3.5em 0 0 0 var(--hover);
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
    box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
    transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
    box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
    box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {
    box-shadow: 0.3em 0.3em 0 0 var(--color), inset 0.3em 0.3em 0 0 var(--color);
    &:hover, &:focus

{
    box-shadow: 0 0 0 0 var(--hover), inset 6em 3.5em 0 0 var(--hover);
}

}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
// Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
  pulse: #ef6eae, 
  close: #ff7f82, 
  raise: #ffa260, 
  up: #e4cb58, 
  slide: #8fc866, 
  offset: #19bc8b
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
// Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
    .#

{
    $button
}

{
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
}

}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {
    color: var(--color);
    transition: 0.25s;
    &:hover, &:focus

{
    border-color: var(--hover);
    color: #fff;
}

}

//=== Pen styling, ignore
body {
    color: #fff;
    background: hsl(227, 10%, 10%);
    font: 300 1em 'Fira Sans', sans-serif;
    // Center everything ever justify-content: center;
    align-content: center;
    align-items: center;
    text-align: center;
    min-height: 100vh;
    display: flex;
}

// Basic button styles
button {
    background: none;
    border: 2px solid;
    font: inherit;
    line-height: 1;
    margin: 0.5em;
    padding: 1em 2em;
}

h1 {
    font-weight: 400;
}

code {
    color: #e4cb58;
    font: inherit;
}